-- ============================================================================
-- Service Management System - Comprehensive Reporting Views
-- Description: MariaDB views for service catalog, pricing, relationships,
--              equipment, bundles, deliverables with full joins and calculations
-- Naming Convention: vw_srvc_* (groups all views together in table listings)
-- ============================================================================

-- >>> Up >>>

-- ============================================================================
-- SERVICE CATALOG VIEWS
-- ============================================================================

-- Active Services with Full Details
CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_catalog_active` AS
SELECT 
    s.id,
    s.sku,
    s.slug,
    s.name,
    s.short_desc,
    s.long_desc,
    s.is_featured,
    s.minimum_quantity,
    s.maximum_quantity,
    s.estimated_hours,
    s.skill_level,
    s.metadata,
    s.version,
    -- Category info
    c.id AS category_id,
    c.name AS category_name,
    c.slug AS category_slug,
    c.icon AS category_icon,
    pc.name AS parent_category_name,
    -- Service type info
    st.id AS service_type_id,
    st.name AS service_type_name,
    st.code AS service_type_code,
    st.description AS service_type_description,
    st.requires_site_visit AS service_type_requires_site_visit,
    st.supports_remote AS service_type_supports_remote,
    st.estimated_duration_hours AS service_type_estimated_duration_hours,
    -- Complexity info
    cl.id AS complexity_id,
    cl.name AS complexity_name,
    cl.level,
    cl.price_multiplier,
    -- User info
    creator.display_name AS created_by_name,
    creator.user_email AS created_by_email,
    updater.display_name AS updated_by_name,
    updater.user_email AS updated_by_email,
    -- Service Price info
    sp.pricing_tier_id AS service_pricing_tier,
    pt.name AS pricing_tier_name,
    sp.pricing_model_id AS service_pricing_model,
    pm.name AS pricing_model_name,
    sp.currency AS service_currency,
    sp.amount AS service_amount,
    sp.unit AS service_unit,
    sp.setup_fee AS service_setup_fee,
    -- Timestamps
    s.created_at,
    s.updated_at
FROM `{!!prefix!!}srvc_services` s
INNER JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
LEFT JOIN `{!!prefix!!}srvc_categories` pc ON c.parent_id = pc.id
INNER JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
INNER JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
INNER JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.id
INNER JOIN `{!!prefix!!}srvc_pricing_tiers` pt ON sp.pricing_tier_id = pt.id
INNER JOIN `{!!prefix!!}srvc_pricing_models` pm ON sp.pricing_model_id = pm.id
INNER JOIN `{!!prefix!!}users` creator ON s.created_by = creator.ID
INNER JOIN `{!!prefix!!}users` updater ON s.updated_by = updater.ID
WHERE s.deleted_at IS NULL 
  AND s.is_active = 1
  AND c.deleted_at IS NULL
  AND st.deleted_at IS NULL
  AND cl.deleted_at IS NULL
  AND sp.deleted_at IS NULL
  AND pt.deleted_at IS NULL
  AND pm.deleted_at IS NULL;

-- -- All Services (including soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_catalog_all` AS
-- SELECT 
--     s.id,
--     s.sku,
--     s.slug,
--     s.name,
--     s.short_desc,
--     s.long_desc,
--     s.is_active,
--     s.is_featured,
--     s.minimum_quantity,
--     s.maximum_quantity,
--     s.estimated_hours,
--     s.skill_level,
--     s.metadata,
--     s.version,
--     s.deleted_at,
--     -- Category info
--     c.id AS category_id,
--     c.name AS category_name,
--     c.slug AS category_slug,
--     c.icon AS category_icon,
--     c.deleted_at AS category_deleted_at,
--     pc.name AS parent_category_name,
--     -- Service type info
--     st.id AS service_type_id,
--     st.name AS service_type_name,
--     st.code AS service_type_code,
--     st.billing_type,
--     st.delivery_method,
--     st.deleted_at AS service_type_deleted_at,
--     -- Complexity info
--     cl.id AS complexity_id,
--     cl.name AS complexity_name,
--     cl.level_order,
--     cl.price_multiplier,
--     cl.icon AS complexity_icon,
--     cl.color AS complexity_color,
--     cl.deleted_at AS complexity_deleted_at,
--     -- User info
--     creator.display_name AS created_by_name,
--     creator.user_email AS created_by_email,
--     updater.display_name AS updated_by_name,
--     updater.user_email AS updated_by_email,
--     -- Timestamps
--     s.created_at,
--     s.updated_at,
--     -- Status flags
--     CASE 
--         WHEN s.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN s.is_active = 0 THEN 'inactive'
--         ELSE 'active'
--     END AS status
-- FROM `{!!prefix!!}srvc_services` s
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` pc ON c.parent_id = pc.id
-- LEFT JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- LEFT JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}users` creator ON s.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON s.updated_by = updater.ID;

-- -- Service Catalog with Metrics (aggregated data)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_catalog_metrics` AS
-- SELECT 
--     s.id,
--     s.name,
--     s.sku,
--     s.slug,
--     c.name AS category_name,
--     st.name AS service_type_name,
--     cl.name AS complexity_name,
--     s.is_active,
--     s.is_featured,
--     s.estimated_hours,
--     -- Pricing metrics
--     COUNT(DISTINCT sp.id) AS price_count,
--     MIN(sp.amount) AS min_price,
--     MAX(sp.amount) AS max_price,
--     AVG(sp.amount) AS avg_price,
--     SUM(CASE WHEN sp.is_current = 1 AND sp.deleted_at IS NULL THEN 1 ELSE 0 END) AS current_price_count,
--     -- Relationship metrics
--     COUNT(DISTINCT sr.id) AS relationship_count,
--     SUM(CASE WHEN sr.relation_type = 'prerequisite' THEN 1 ELSE 0 END) AS prerequisite_count,
--     SUM(CASE WHEN sr.relation_type = 'incompatible_with' THEN 1 ELSE 0 END) AS incompatible_count,
--     SUM(CASE WHEN sr.relation_type = 'complements' THEN 1 ELSE 0 END) AS complement_count,
--     -- Equipment metrics
--     COUNT(DISTINCT se.id) AS equipment_count,
--     SUM(CASE WHEN se.required = 1 THEN 1 ELSE 0 END) AS required_equipment_count,
--     SUM(se.quantity * e.unit_cost) AS total_equipment_cost,
--     -- Deliverable metrics
--     COUNT(DISTINCT sd.id) AS deliverable_count,
--     SUM(CASE WHEN sd.is_optional = 0 THEN 1 ELSE 0 END) AS required_deliverable_count,
--     -- Bundle metrics
--     COUNT(DISTINCT bi.bundle_id) AS bundle_count,
--     s.created_at,
--     s.updated_at
-- FROM `{!!prefix!!}srvc_services` s
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- LEFT JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id AND sp.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_service_relationships` sr ON s.id = sr.service_id AND sr.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_service_equipment` se ON s.id = se.service_id AND se.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_equipment` e ON se.equipment_id = e.id AND e.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_service_deliverables` sd ON s.id = sd.service_id AND sd.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_bundle_items` bi ON s.id = bi.service_id AND bi.deleted_at IS NULL
-- WHERE s.deleted_at IS NULL
-- GROUP BY s.id, s.name, s.sku, s.slug, c.name, st.name, cl.name, 
--          s.is_active, s.is_featured, s.estimated_hours, s.created_at, s.updated_at;

-- -- ============================================================================
-- -- PRICING VIEWS
-- -- ============================================================================

-- -- Current Active Pricing with Full Details
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_pricing_current` AS
-- SELECT 
--     sp.id AS price_id,
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     s.slug AS service_slug,
--     c.name AS category_name,
--     st.name AS service_type_name,
--     cl.name AS complexity_name,
--     cl.price_multiplier,
--     -- Pricing details
--     pt.id AS pricing_tier_id,
--     pt.name AS tier_name,
--     pt.code AS tier_code,
--     pt.discount_pct AS tier_discount_pct,
--     pt.min_volume AS tier_min_volume,
--     pt.max_volume AS tier_max_volume,
--     pm.id AS pricing_model_id,
--     pm.name AS model_name,
--     pm.code AS model_code,
--     pm.is_time_based,
--     sp.currency,
--     sp.amount AS base_amount,
--     sp.setup_fee,
--     sp.unit,
--     -- Calculated amounts
--     (sp.amount * cl.price_multiplier) AS complexity_adjusted_amount,
--     (sp.amount * (1 - pt.discount_pct / 100)) AS tier_discounted_amount,
--     (sp.amount * cl.price_multiplier * (1 - pt.discount_pct / 100)) AS final_amount,
--     sp.valid_from,
--     sp.valid_to,
--     sp.approval_status,
--     -- Approver info
--     approver.display_name AS approved_by_name,
--     approver.user_email AS approved_by_email,
--     sp.approved_at,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sp.created_at,
--     sp.updated_at
-- FROM `{!!prefix!!}srvc_service_prices` sp
-- INNER JOIN `{!!prefix!!}srvc_services` s ON sp.service_id = s.id
-- INNER JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- INNER JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- INNER JOIN `{!!prefix!!}srvc_pricing_tiers` pt ON sp.pricing_tier_id = pt.id
-- INNER JOIN `{!!prefix!!}srvc_pricing_models` pm ON sp.pricing_model_id = pm.id
-- LEFT JOIN `{!!prefix!!}users` approver ON sp.approved_by = approver.ID
-- INNER JOIN `{!!prefix!!}users` creator ON sp.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON sp.updated_by = updater.ID
-- WHERE sp.deleted_at IS NULL 
--   AND sp.is_current = 1
--   AND s.deleted_at IS NULL
--   AND s.is_active = 1
--   AND (sp.valid_to IS NULL OR sp.valid_to > NOW())
--   AND c.deleted_at IS NULL
--   AND st.deleted_at IS NULL
--   AND cl.deleted_at IS NULL
--   AND pt.deleted_at IS NULL
--   AND pm.deleted_at IS NULL;

-- -- All Pricing (including historical and soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_pricing_all` AS
-- SELECT 
--     sp.id AS price_id,
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     s.is_active AS service_is_active,
--     c.name AS category_name,
--     cl.name AS complexity_name,
--     cl.price_multiplier,
--     -- Pricing details
--     pt.name AS tier_name,
--     pt.code AS tier_code,
--     pt.discount_pct AS tier_discount_pct,
--     pm.name AS model_name,
--     pm.code AS model_code,
--     pm.is_time_based,
--     sp.currency,
--     sp.amount AS base_amount,
--     sp.setup_fee,
--     sp.unit,
--     -- Calculated amounts
--     (sp.amount * cl.price_multiplier) AS complexity_adjusted_amount,
--     (sp.amount * (1 - pt.discount_pct / 100)) AS tier_discounted_amount,
--     (sp.amount * cl.price_multiplier * (1 - pt.discount_pct / 100)) AS final_amount,
--     sp.valid_from,
--     sp.valid_to,
--     sp.is_current,
--     sp.approval_status,
--     sp.approved_at,
--     sp.deleted_at,
--     -- Status flags
--     CASE 
--         WHEN sp.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN sp.valid_to IS NOT NULL AND sp.valid_to < NOW() THEN 'expired'
--         WHEN sp.is_current = 0 THEN 'historical'
--         WHEN sp.approval_status != 'approved' THEN sp.approval_status
--         ELSE 'current'
--     END AS status,
--     -- User info
--     approver.display_name AS approved_by_name,
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sp.created_at,
--     sp.updated_at
-- FROM `{!!prefix!!}srvc_service_prices` sp
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON sp.service_id = s.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_tiers` pt ON sp.pricing_tier_id = pt.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_models` pm ON sp.pricing_model_id = pm.id
-- LEFT JOIN `{!!prefix!!}users` approver ON sp.approved_by = approver.ID
-- LEFT JOIN `{!!prefix!!}users` creator ON sp.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON sp.updated_by = updater.ID;

-- -- Pricing Analysis by Tier
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_pricing_by_tier` AS
-- SELECT 
--     pt.id AS tier_id,
--     pt.name AS tier_name,
--     pt.code AS tier_code,
--     pt.discount_pct AS tier_default_discount,
--     pt.min_volume,
--     pt.max_volume,
--     pt.sort_order,
--     -- Service counts
--     COUNT(DISTINCT sp.service_id) AS service_count,
--     COUNT(DISTINCT CASE WHEN sp.is_current = 1 AND sp.deleted_at IS NULL THEN sp.service_id END) AS active_service_count,
--     -- Pricing statistics
--     MIN(sp.amount) AS min_price,
--     MAX(sp.amount) AS max_price,
--     AVG(sp.amount) AS avg_price,
--     SUM(sp.amount) AS total_base_price,
--     AVG(sp.setup_fee) AS avg_setup_fee,
--     -- Approval statistics
--     COUNT(CASE WHEN sp.approval_status = 'approved' THEN 1 END) AS approved_count,
--     COUNT(CASE WHEN sp.approval_status = 'pending' THEN 1 END) AS pending_count,
--     COUNT(CASE WHEN sp.approval_status = 'draft' THEN 1 END) AS draft_count,
--     COUNT(CASE WHEN sp.approval_status = 'rejected' THEN 1 END) AS rejected_count
-- FROM `{!!prefix!!}srvc_pricing_tiers` pt
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON pt.id = sp.pricing_tier_id
-- WHERE pt.deleted_at IS NULL
-- GROUP BY pt.id, pt.name, pt.code, pt.discount_pct, pt.min_volume, pt.max_volume, pt.sort_order;

-- -- Pricing Analysis by Model
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_pricing_by_model` AS
-- SELECT 
--     pm.id AS model_id,
--     pm.name AS model_name,
--     pm.code AS model_code,
--     pm.description AS model_description,
--     pm.is_time_based,
--     -- Service counts
--     COUNT(DISTINCT sp.service_id) AS service_count,
--     COUNT(DISTINCT CASE WHEN sp.is_current = 1 AND sp.deleted_at IS NULL THEN sp.service_id END) AS active_service_count,
--     -- Pricing statistics
--     MIN(sp.amount) AS min_price,
--     MAX(sp.amount) AS max_price,
--     AVG(sp.amount) AS avg_price,
--     SUM(sp.amount) AS total_base_price,
--     AVG(sp.setup_fee) AS avg_setup_fee,
--     -- Most common unit
--     (
--         SELECT sp2.unit 
--         FROM `{!!prefix!!}srvc_service_prices` sp2 
--         WHERE sp2.pricing_model_id = pm.id AND sp2.unit IS NOT NULL
--         GROUP BY sp2.unit 
--         ORDER BY COUNT(*) DESC 
--         LIMIT 1
--     ) AS most_common_unit,
--     -- Most common currency
--     (
--         SELECT sp2.currency 
--         FROM `{!!prefix!!}srvc_service_prices` sp2 
--         WHERE sp2.pricing_model_id = pm.id
--         GROUP BY sp2.currency 
--         ORDER BY COUNT(*) DESC 
--         LIMIT 1
--     ) AS most_common_currency
-- FROM `{!!prefix!!}srvc_pricing_models` pm
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON pm.id = sp.pricing_model_id
-- WHERE pm.deleted_at IS NULL
-- GROUP BY pm.id, pm.name, pm.code, pm.description, pm.is_time_based;

-- -- Price History with Change Details
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_pricing_history` AS
-- SELECT 
--     ph.id AS history_id,
--     ph.service_price_id,
--     s.name AS service_name,
--     s.sku AS service_sku,
--     ph.change_type,
--     -- Amount changes
--     ph.old_amount,
--     ph.new_amount,
--     (ph.new_amount - ph.old_amount) AS amount_change,
--     CASE 
--         WHEN ph.old_amount IS NOT NULL AND ph.old_amount != 0 
--         THEN ROUND(((ph.new_amount - ph.old_amount) / ph.old_amount * 100), 2)
--         ELSE NULL
--     END AS amount_change_pct,
--     -- Setup fee changes
--     ph.old_setup_fee,
--     ph.new_setup_fee,
--     (ph.new_setup_fee - ph.old_setup_fee) AS setup_fee_change,
--     -- Other changes
--     ph.old_currency,
--     ph.new_currency,
--     ph.old_unit,
--     ph.new_unit,
--     ph.old_approval_status,
--     ph.new_approval_status,
--     -- Tier and model changes
--     old_tier.name AS old_tier_name,
--     new_tier.name AS new_tier_name,
--     old_model.name AS old_model_name,
--     new_model.name AS new_model_name,
--     -- Description and user
--     ph.change_description,
--     changer.display_name AS changed_by_name,
--     changer.user_email AS changed_by_email,
--     ph.changed_at
-- FROM `{!!prefix!!}srvc_price_history` ph
-- INNER JOIN `{!!prefix!!}srvc_service_prices` sp ON ph.service_price_id = sp.id
-- INNER JOIN `{!!prefix!!}srvc_services` s ON sp.service_id = s.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_tiers` old_tier ON ph.old_pricing_tier_id = old_tier.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_tiers` new_tier ON ph.new_pricing_tier_id = new_tier.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_models` old_model ON ph.old_pricing_model_id = old_model.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_models` new_model ON ph.new_pricing_model_id = new_model.id
-- INNER JOIN `{!!prefix!!}users` changer ON ph.changed_by = changer.ID
-- ORDER BY ph.changed_at DESC;

-- -- ============================================================================
-- -- SERVICE RELATIONSHIPS VIEWS
-- -- ============================================================================

-- -- Active Service Relationships with Full Details
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_relationships_active` AS
-- SELECT 
--     sr.id AS relationship_id,
--     -- Primary service
--     s1.id AS service_id,
--     s1.sku AS service_sku,
--     s1.name AS service_name,
--     s1.slug AS service_slug,
--     c1.name AS service_category,
--     st1.name AS service_type,
--     -- Related service
--     s2.id AS related_service_id,
--     s2.sku AS related_service_sku,
--     s2.name AS related_service_name,
--     s2.slug AS related_service_slug,
--     c2.name AS related_service_category,
--     st2.name AS related_service_type,
--     -- Relationship details
--     sr.relation_type,
--     sr.strength,
--     CASE 
--         WHEN sr.strength >= 8 THEN 'Critical'
--         WHEN sr.strength >= 6 THEN 'High'
--         WHEN sr.strength >= 4 THEN 'Medium'
--         ELSE 'Low'
--     END AS strength_level,
--     sr.notes,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sr.created_at,
--     sr.updated_at
-- FROM `{!!prefix!!}srvc_service_relationships` sr
-- INNER JOIN `{!!prefix!!}srvc_services` s1 ON sr.service_id = s1.id
-- INNER JOIN `{!!prefix!!}srvc_services` s2 ON sr.related_service_id = s2.id
-- INNER JOIN `{!!prefix!!}srvc_categories` c1 ON s1.category_id = c1.id
-- INNER JOIN `{!!prefix!!}srvc_categories` c2 ON s2.category_id = c2.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st1 ON s1.service_type_id = st1.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st2 ON s2.service_type_id = st2.id
-- INNER JOIN `{!!prefix!!}users` creator ON sr.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON sr.updated_by = updater.ID
-- WHERE sr.deleted_at IS NULL
--   AND s1.deleted_at IS NULL
--   AND s2.deleted_at IS NULL
--   AND s1.is_active = 1
--   AND s2.is_active = 1;

-- -- All Service Relationships (including soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_relationships_all` AS
-- SELECT 
--     sr.id AS relationship_id,
--     -- Primary service
--     s1.id AS service_id,
--     s1.sku AS service_sku,
--     s1.name AS service_name,
--     s1.is_active AS service_is_active,
--     s1.deleted_at AS service_deleted_at,
--     c1.name AS service_category,
--     -- Related service
--     s2.id AS related_service_id,
--     s2.sku AS related_service_sku,
--     s2.name AS related_service_name,
--     s2.is_active AS related_service_is_active,
--     s2.deleted_at AS related_service_deleted_at,
--     c2.name AS related_service_category,
--     -- Relationship details
--     sr.relation_type,
--     sr.strength,
--     CASE 
--         WHEN sr.strength >= 8 THEN 'Critical'
--         WHEN sr.strength >= 6 THEN 'High'
--         WHEN sr.strength >= 4 THEN 'Medium'
--         ELSE 'Low'
--     END AS strength_level,
--     sr.notes,
--     sr.deleted_at AS relationship_deleted_at,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sr.created_at,
--     sr.updated_at,
--     -- Status
--     CASE 
--         WHEN sr.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN s1.deleted_at IS NOT NULL OR s2.deleted_at IS NOT NULL THEN 'orphaned'
--         WHEN s1.is_active = 0 OR s2.is_active = 0 THEN 'inactive'
--         ELSE 'active'
--     END AS status
-- FROM `{!!prefix!!}srvc_service_relationships` sr
-- LEFT JOIN `{!!prefix!!}srvc_services` s1 ON sr.service_id = s1.id
-- LEFT JOIN `{!!prefix!!}srvc_services` s2 ON sr.related_service_id = s2.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` c1 ON s1.category_id = c1.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` c2 ON s2.category_id = c2.id
-- LEFT JOIN `{!!prefix!!}users` creator ON sr.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON sr.updated_by = updater.ID;

-- -- Relationship Summary by Service
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_relationships_summary` AS
-- SELECT 
--     s.id AS service_id,
--     s.name AS service_name,
--     s.sku AS service_sku,
--     c.name AS category_name,
--     -- Outgoing relationships
--     COUNT(DISTINCT sr_out.id) AS total_relationships,
--     SUM(CASE WHEN sr_out.relation_type = 'prerequisite' THEN 1 ELSE 0 END) AS prerequisite_count,
--     SUM(CASE WHEN sr_out.relation_type = 'dependency' THEN 1 ELSE 0 END) AS dependency_count,
--     SUM(CASE WHEN sr_out.relation_type = 'incompatible_with' THEN 1 ELSE 0 END) AS incompatible_count,
--     SUM(CASE WHEN sr_out.relation_type = 'substitute_for' THEN 1 ELSE 0 END) AS substitute_count,
--     SUM(CASE WHEN sr_out.relation_type = 'complements' THEN 1 ELSE 0 END) AS complement_count,
--     SUM(CASE WHEN sr_out.relation_type = 'replaces' THEN 1 ELSE 0 END) AS replaces_count,
--     SUM(CASE WHEN sr_out.relation_type = 'requires' THEN 1 ELSE 0 END) AS requires_count,
--     SUM(CASE WHEN sr_out.relation_type = 'enables' THEN 1 ELSE 0 END) AS enables_count,
--     SUM(CASE WHEN sr_out.relation_type = 'conflicts_with' THEN 1 ELSE 0 END) AS conflicts_count,
--     -- Incoming relationships (reversed)
--     COUNT(DISTINCT sr_in.id) AS incoming_relationships,
--     SUM(CASE WHEN sr_in.relation_type = 'prerequisite' THEN 1 ELSE 0 END) AS prerequisite_for_count,
--     SUM(CASE WHEN sr_in.relation_type = 'dependency' THEN 1 ELSE 0 END) AS dependency_for_count,
--     -- Strength metrics
--     AVG(sr_out.strength) AS avg_relationship_strength,
--     MAX(sr_out.strength) AS max_relationship_strength,
--     MIN(sr_out.strength) AS min_relationship_strength
-- FROM `{!!prefix!!}srvc_services` s
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_relationships` sr_out 
--     ON s.id = sr_out.service_id AND sr_out.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_service_relationships` sr_in 
--     ON s.id = sr_in.related_service_id AND sr_in.deleted_at IS NULL
-- WHERE s.deleted_at IS NULL
-- GROUP BY s.id, s.name, s.sku, c.name;

-- -- ============================================================================
-- -- EQUIPMENT VIEWS
-- -- ============================================================================

-- -- Service Equipment Requirements (Active)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_equipment_active` AS
-- SELECT 
--     se.id AS service_equipment_id,
--     -- Service info
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     c.name AS category_name,
--     st.name AS service_type_name,
--     -- Equipment info
--     e.id AS equipment_id,
--     e.sku AS equipment_sku,
--     e.name AS equipment_name,
--     e.manufacturer,
--     e.model,
--     e.category AS equipment_category,
--     e.unit_cost,
--     e.is_consumable,
--     e.specs,
--     -- Requirement details
--     se.required,
--     se.quantity,
--     se.quantity_unit,
--     se.cost_included,
--     -- Calculated costs
--     (se.quantity * e.unit_cost) AS total_equipment_cost,
--     CASE WHEN se.cost_included = 1 THEN (se.quantity * e.unit_cost) ELSE 0 END AS included_cost,
--     CASE WHEN se.cost_included = 0 THEN (se.quantity * e.unit_cost) ELSE 0 END AS additional_cost,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     se.created_at,
--     se.updated_at
-- FROM `{!!prefix!!}srvc_service_equipment` se
-- INNER JOIN `{!!prefix!!}srvc_services` s ON se.service_id = s.id
-- INNER JOIN `{!!prefix!!}srvc_equipment` e ON se.equipment_id = e.id
-- INNER JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- INNER JOIN `{!!prefix!!}users` creator ON se.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON se.updated_by = updater.ID
-- WHERE se.deleted_at IS NULL
--   AND s.deleted_at IS NULL
--   AND e.deleted_at IS NULL
--   AND s.is_active = 1;

-- -- All Service Equipment (including soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_equipment_all` AS
-- SELECT 
--     se.id AS service_equipment_id,
--     -- Service info
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     s.is_active AS service_is_active,
--     s.deleted_at AS service_deleted_at,
--     c.name AS category_name,
--     -- Equipment info
--     e.id AS equipment_id,
--     e.sku AS equipment_sku,
--     e.name AS equipment_name,
--     e.manufacturer,
--     e.model,
--     e.category AS equipment_category,
--     e.unit_cost,
--     e.is_consumable,
--     e.deleted_at AS equipment_deleted_at,
--     -- Requirement details
--     se.required,
--     se.quantity,
--     se.quantity_unit,
--     se.cost_included,
--     -- Calculated costs
--     (se.quantity * e.unit_cost) AS total_equipment_cost,
--     CASE WHEN se.cost_included = 1 THEN (se.quantity * e.unit_cost) ELSE 0 END AS included_cost,
--     CASE WHEN se.cost_included = 0 THEN (se.quantity * e.unit_cost) ELSE 0 END AS additional_cost,
--     se.deleted_at AS service_equipment_deleted_at,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     se.created_at,
--     se.updated_at,
--     -- Status
--     CASE 
--         WHEN se.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN s.deleted_at IS NOT NULL OR e.deleted_at IS NOT NULL THEN 'orphaned'
--         WHEN s.is_active = 0 THEN 'inactive'
--         ELSE 'active'
--     END AS status
-- FROM `{!!prefix!!}srvc_service_equipment` se
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON se.service_id = s.id
-- LEFT JOIN `{!!prefix!!}srvc_equipment` e ON se.equipment_id = e.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}users` creator ON se.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON se.updated_by = updater.ID;

-- -- Equipment Cost Summary by Service
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_equipment_costs` AS
-- SELECT 
--     s.id AS service_id,
--     s.name AS service_name,
--     s.sku AS service_sku,
--     c.name AS category_name,
--     -- Equipment counts
--     COUNT(DISTINCT se.equipment_id) AS equipment_count,
--     SUM(CASE WHEN se.required = 1 THEN 1 ELSE 0 END) AS required_equipment_count,
--     SUM(CASE WHEN se.required = 0 THEN 1 ELSE 0 END) AS optional_equipment_count,
--     SUM(CASE WHEN e.is_consumable = 1 THEN 1 ELSE 0 END) AS consumable_count,
--     -- Cost calculations
--     SUM(se.quantity * e.unit_cost) AS total_equipment_cost,
--     SUM(CASE WHEN se.required = 1 THEN se.quantity * e.unit_cost ELSE 0 END) AS required_equipment_cost,
--     SUM(CASE WHEN se.required = 0 THEN se.quantity * e.unit_cost ELSE 0 END) AS optional_equipment_cost,
--     SUM(CASE WHEN se.cost_included = 1 THEN se.quantity * e.unit_cost ELSE 0 END) AS included_in_price_cost,
--     SUM(CASE WHEN se.cost_included = 0 THEN se.quantity * e.unit_cost ELSE 0 END) AS additional_cost,
--     SUM(CASE WHEN e.is_consumable = 1 THEN se.quantity * e.unit_cost ELSE 0 END) AS consumable_cost,
--     -- Average costs
--     AVG(e.unit_cost) AS avg_equipment_unit_cost,
--     MAX(e.unit_cost) AS max_equipment_unit_cost,
--     MIN(e.unit_cost) AS min_equipment_unit_cost
-- FROM `{!!prefix!!}srvc_services` s
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_equipment` se ON s.id = se.service_id AND se.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_equipment` e ON se.equipment_id = e.id AND e.deleted_at IS NULL
-- WHERE s.deleted_at IS NULL
-- GROUP BY s.id, s.name, s.sku, c.name;

-- -- Equipment Utilization Analysis
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_equipment_utilization` AS
-- SELECT 
--     e.id AS equipment_id,
--     e.sku AS equipment_sku,
--     e.name AS equipment_name,
--     e.manufacturer,
--     e.model,
--     e.category AS equipment_category,
--     e.unit_cost,
--     e.is_consumable,
--     -- Service counts
--     COUNT(DISTINCT se.service_id) AS service_count,
--     COUNT(DISTINCT CASE WHEN se.required = 1 THEN se.service_id END) AS required_by_count,
--     COUNT(DISTINCT CASE WHEN se.required = 0 THEN se.service_id END) AS optional_for_count,
--     -- Quantity statistics
--     SUM(se.quantity) AS total_quantity_across_services,
--     AVG(se.quantity) AS avg_quantity_per_service,
--     MAX(se.quantity) AS max_quantity_per_service,
--     MIN(se.quantity) AS min_quantity_per_service,
--     -- Cost impact
--     SUM(se.quantity * e.unit_cost) AS total_cost_impact,
--     AVG(se.quantity * e.unit_cost) AS avg_cost_per_service
-- FROM `{!!prefix!!}srvc_equipment` e
-- LEFT JOIN `{!!prefix!!}srvc_service_equipment` se ON e.id = se.equipment_id AND se.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON se.service_id = s.id AND s.deleted_at IS NULL AND s.is_active = 1
-- WHERE e.deleted_at IS NULL
-- GROUP BY e.id, e.sku, e.name, e.manufacturer, e.model, e.category, e.unit_cost, e.is_consumable;

-- -- ============================================================================
-- -- BUNDLE VIEWS
-- -- ============================================================================

-- -- Active Bundles with Full Details
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_bundles_active` AS
-- SELECT 
--     sb.id AS bundle_id,
--     sb.name AS bundle_name,
--     sb.slug AS bundle_slug,
--     sb.short_desc,
--     sb.long_desc,
--     sb.bundle_type,
--     sb.total_discount_pct,
--     sb.valid_from,
--     sb.valid_to,
--     -- Item counts
--     COUNT(DISTINCT bi.service_id) AS service_count,
--     SUM(CASE WHEN bi.is_optional = 0 THEN 1 ELSE 0 END) AS required_service_count,
--     SUM(CASE WHEN bi.is_optional = 1 THEN 1 ELSE 0 END) AS optional_service_count,
--     -- Quantity totals
--     SUM(bi.quantity) AS total_quantity,
--     -- Discount statistics
--     AVG(bi.discount_pct) AS avg_item_discount_pct,
--     MAX(bi.discount_pct) AS max_item_discount_pct,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sb.created_at,
--     sb.updated_at
-- FROM `{!!prefix!!}srvc_service_bundles` sb
-- LEFT JOIN `{!!prefix!!}srvc_bundle_items` bi ON sb.id = bi.bundle_id AND bi.deleted_at IS NULL
-- INNER JOIN `{!!prefix!!}users` creator ON sb.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON sb.updated_by = updater.ID
-- WHERE sb.deleted_at IS NULL
--   AND sb.is_active = 1
--   AND (sb.valid_to IS NULL OR sb.valid_to > NOW())
-- GROUP BY sb.id, sb.name, sb.slug, sb.short_desc, sb.long_desc, sb.bundle_type, 
--          sb.total_discount_pct, sb.valid_from, sb.valid_to, 
--          creator.display_name, updater.display_name, sb.created_at, sb.updated_at;

-- -- All Bundles (including soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_bundles_all` AS
-- SELECT 
--     sb.id AS bundle_id,
--     sb.name AS bundle_name,
--     sb.slug AS bundle_slug,
--     sb.short_desc,
--     sb.bundle_type,
--     sb.total_discount_pct,
--     sb.is_active,
--     sb.valid_from,
--     sb.valid_to,
--     sb.deleted_at,
--     -- Item counts
--     COUNT(DISTINCT bi.service_id) AS service_count,
--     SUM(CASE WHEN bi.is_optional = 0 THEN 1 ELSE 0 END) AS required_service_count,
--     SUM(CASE WHEN bi.is_optional = 1 THEN 1 ELSE 0 END) AS optional_service_count,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sb.created_at,
--     sb.updated_at,
--     -- Status
--     CASE 
--         WHEN sb.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN sb.valid_to IS NOT NULL AND sb.valid_to < NOW() THEN 'expired'
--         WHEN sb.is_active = 0 THEN 'inactive'
--         ELSE 'active'
--     END AS status
-- FROM `{!!prefix!!}srvc_service_bundles` sb
-- LEFT JOIN `{!!prefix!!}srvc_bundle_items` bi ON sb.id = bi.bundle_id
-- LEFT JOIN `{!!prefix!!}users` creator ON sb.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON sb.updated_by = updater.ID
-- GROUP BY sb.id, sb.name, sb.slug, sb.short_desc, sb.bundle_type, 
--          sb.total_discount_pct, sb.is_active, sb.valid_from, sb.valid_to, sb.deleted_at,
--          creator.display_name, updater.display_name, sb.created_at, sb.updated_at;

-- -- Bundle Items with Pricing
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_bundle_items_active` AS
-- SELECT 
--     bi.id AS bundle_item_id,
--     -- Bundle info
--     sb.id AS bundle_id,
--     sb.name AS bundle_name,
--     sb.slug AS bundle_slug,
--     sb.bundle_type,
--     sb.total_discount_pct AS bundle_discount_pct,
--     -- Service info
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     c.name AS category_name,
--     st.name AS service_type_name,
--     -- Item details
--     bi.quantity,
--     bi.discount_pct AS item_discount_pct,
--     bi.is_optional,
--     bi.sort_order,
--     -- Pricing (using current pricing)
--     sp.amount AS unit_price,
--     sp.currency,
--     sp.unit,
--     -- Calculated amounts
--     (bi.quantity * sp.amount) AS subtotal,
--     (bi.quantity * sp.amount * (1 - bi.discount_pct / 100)) AS item_discounted_total,
--     (bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) AS final_item_total,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     bi.created_at,
--     bi.updated_at
-- FROM `{!!prefix!!}srvc_bundle_items` bi
-- INNER JOIN `{!!prefix!!}srvc_service_bundles` sb ON bi.bundle_id = sb.id
-- INNER JOIN `{!!prefix!!}srvc_services` s ON bi.service_id = s.id
-- INNER JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- INNER JOIN `{!!prefix!!}users` creator ON bi.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON bi.updated_by = updater.ID
-- WHERE bi.deleted_at IS NULL
--   AND sb.deleted_at IS NULL
--   AND sb.is_active = 1
--   AND s.deleted_at IS NULL
--   AND s.is_active = 1
-- ORDER BY sb.id, bi.sort_order;

-- -- All Bundle Items (including soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_bundle_items_all` AS
-- SELECT 
--     bi.id AS bundle_item_id,
--     -- Bundle info
--     sb.id AS bundle_id,
--     sb.name AS bundle_name,
--     sb.is_active AS bundle_is_active,
--     sb.deleted_at AS bundle_deleted_at,
--     sb.bundle_type,
--     sb.total_discount_pct AS bundle_discount_pct,
--     -- Service info
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     s.is_active AS service_is_active,
--     s.deleted_at AS service_deleted_at,
--     c.name AS category_name,
--     -- Item details
--     bi.quantity,
--     bi.discount_pct AS item_discount_pct,
--     bi.is_optional,
--     bi.sort_order,
--     bi.deleted_at AS bundle_item_deleted_at,
--     -- Pricing
--     sp.amount AS unit_price,
--     sp.currency,
--     (bi.quantity * sp.amount) AS subtotal,
--     (bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) AS final_item_total,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     bi.created_at,
--     bi.updated_at,
--     -- Status
--     CASE 
--         WHEN bi.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN sb.deleted_at IS NOT NULL OR s.deleted_at IS NOT NULL THEN 'orphaned'
--         WHEN sb.is_active = 0 OR s.is_active = 0 THEN 'inactive'
--         ELSE 'active'
--     END AS status
-- FROM `{!!prefix!!}srvc_bundle_items` bi
-- LEFT JOIN `{!!prefix!!}srvc_service_bundles` sb ON bi.bundle_id = sb.id
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON bi.service_id = s.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}users` creator ON bi.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON bi.updated_by = updater.ID;

-- -- Bundle Pricing Summary
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_bundle_pricing` AS
-- SELECT 
--     sb.id AS bundle_id,
--     sb.name AS bundle_name,
--     sb.slug AS bundle_slug,
--     sb.bundle_type,
--     sb.total_discount_pct,
--     -- Counts
--     COUNT(DISTINCT bi.service_id) AS service_count,
--     SUM(CASE WHEN bi.is_optional = 0 THEN 1 ELSE 0 END) AS required_count,
--     SUM(CASE WHEN bi.is_optional = 1 THEN 1 ELSE 0 END) AS optional_count,
--     -- Pricing calculations (required items only)
--     SUM(CASE WHEN bi.is_optional = 0 THEN bi.quantity * sp.amount ELSE 0 END) AS required_subtotal,
--     SUM(CASE WHEN bi.is_optional = 0 
--         THEN bi.quantity * sp.amount * (1 - bi.discount_pct / 100) 
--         ELSE 0 END) AS required_after_item_discount,
--     SUM(CASE WHEN bi.is_optional = 0 
--         THEN bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)
--         ELSE 0 END) AS required_final_total,
--     -- Optional items pricing
--     SUM(CASE WHEN bi.is_optional = 1 THEN bi.quantity * sp.amount ELSE 0 END) AS optional_subtotal,
--     SUM(CASE WHEN bi.is_optional = 1 
--         THEN bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)
--         ELSE 0 END) AS optional_final_total,
--     -- Total pricing (all items)
--     SUM(bi.quantity * sp.amount) AS total_subtotal,
--     SUM(bi.quantity * sp.amount * (1 - bi.discount_pct / 100)) AS total_after_item_discount,
--     SUM(bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) AS total_final,
--     -- Savings calculations
--     SUM(bi.quantity * sp.amount) - 
--         SUM(bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) AS total_savings,
--     CASE 
--         WHEN SUM(bi.quantity * sp.amount) > 0 
--         THEN ROUND((1 - SUM(bi.quantity * sp.amount * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) 
--             / SUM(bi.quantity * sp.amount)) * 100, 2)
--         ELSE 0
--     END AS effective_discount_pct
-- FROM `{!!prefix!!}srvc_service_bundles` sb
-- LEFT JOIN `{!!prefix!!}srvc_bundle_items` bi ON sb.id = bi.bundle_id AND bi.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON bi.service_id = s.id AND s.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE sb.deleted_at IS NULL
--   AND sb.is_active = 1
-- GROUP BY sb.id, sb.name, sb.slug, sb.bundle_type, sb.total_discount_pct;

-- -- ============================================================================
-- -- DELIVERABLES VIEWS
-- -- ============================================================================

-- -- Active Service Deliverables
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_deliverables_active` AS
-- SELECT 
--     sd.id AS service_deliverable_id,
--     -- Service info
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     c.name AS category_name,
--     st.name AS service_type_name,
--     -- Deliverable info
--     d.id AS deliverable_id,
--     d.name AS deliverable_name,
--     d.description AS deliverable_description,
--     d.deliverable_type,
--     d.template_path,
--     d.estimated_effort_hours,
--     d.requires_approval,
--     -- Assignment details
--     sd.is_optional,
--     sd.sequence_order,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sd.created_at,
--     sd.updated_at
-- FROM `{!!prefix!!}srvc_service_deliverables` sd
-- INNER JOIN `{!!prefix!!}srvc_services` s ON sd.service_id = s.id
-- INNER JOIN `{!!prefix!!}srvc_deliverables` d ON sd.deliverable_id = d.id
-- INNER JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- INNER JOIN `{!!prefix!!}users` creator ON sd.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON sd.updated_by = updater.ID
-- WHERE sd.deleted_at IS NULL
--   AND s.deleted_at IS NULL
--   AND d.deleted_at IS NULL
--   AND s.is_active = 1
-- ORDER BY s.id, sd.sequence_order;

-- -- All Service Deliverables (including soft-deleted)
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_deliverables_all` AS
-- SELECT 
--     sd.id AS service_deliverable_id,
--     -- Service info
--     s.id AS service_id,
--     s.sku AS service_sku,
--     s.name AS service_name,
--     s.is_active AS service_is_active,
--     s.deleted_at AS service_deleted_at,
--     c.name AS category_name,
--     -- Deliverable info
--     d.id AS deliverable_id,
--     d.name AS deliverable_name,
--     d.deliverable_type,
--     d.deleted_at AS deliverable_deleted_at,
--     -- Assignment details
--     sd.is_optional,
--     sd.sequence_order,
--     sd.deleted_at AS service_deliverable_deleted_at,
--     -- User info
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name,
--     sd.created_at,
--     sd.updated_at,
--     -- Status
--     CASE 
--         WHEN sd.deleted_at IS NOT NULL THEN 'deleted'
--         WHEN s.deleted_at IS NOT NULL OR d.deleted_at IS NOT NULL THEN 'orphaned'
--         WHEN s.is_active = 0 THEN 'inactive'
--         ELSE 'active'
--     END AS status
-- FROM `{!!prefix!!}srvc_service_deliverables` sd
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON sd.service_id = s.id
-- LEFT JOIN `{!!prefix!!}srvc_deliverables` d ON sd.deliverable_id = d.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}users` creator ON sd.created_by = creator.ID
-- LEFT JOIN `{!!prefix!!}users` updater ON sd.updated_by = updater.ID;

-- -- Deliverable Summary by Service
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_deliverables_summary` AS
-- SELECT 
--     s.id AS service_id,
--     s.name AS service_name,
--     s.sku AS service_sku,
--     c.name AS category_name,
--     -- Deliverable counts
--     COUNT(DISTINCT sd.deliverable_id) AS total_deliverables,
--     SUM(CASE WHEN sd.is_optional = 0 THEN 1 ELSE 0 END) AS required_deliverables,
--     SUM(CASE WHEN sd.is_optional = 1 THEN 1 ELSE 0 END) AS optional_deliverables,
--     -- Deliverable types
--     SUM(CASE WHEN d.deliverable_type = 'document' THEN 1 ELSE 0 END) AS document_count,
--     SUM(CASE WHEN d.deliverable_type = 'software' THEN 1 ELSE 0 END) AS software_count,
--     SUM(CASE WHEN d.deliverable_type = 'hardware' THEN 1 ELSE 0 END) AS hardware_count,
--     SUM(CASE WHEN d.deliverable_type = 'service' THEN 1 ELSE 0 END) AS service_count,
--     SUM(CASE WHEN d.deliverable_type = 'training' THEN 1 ELSE 0 END) AS training_count,
--     SUM(CASE WHEN d.deliverable_type = 'report' THEN 1 ELSE 0 END) AS report_count,
--     -- Effort calculations
--     SUM(d.estimated_effort_hours) AS total_effort_hours,
--     AVG(d.estimated_effort_hours) AS avg_effort_hours,
--     -- Approval requirements
--     SUM(CASE WHEN d.requires_approval = 1 THEN 1 ELSE 0 END) AS approval_required_count
-- FROM `{!!prefix!!}srvc_services` s
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_deliverables` sd ON s.id = sd.service_id AND sd.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_deliverables` d ON sd.deliverable_id = d.id AND d.deleted_at IS NULL
-- WHERE s.deleted_at IS NULL
-- GROUP BY s.id, s.name, s.sku, c.name;

-- -- Deliverable Utilization Analysis
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_deliverable_utilization` AS
-- SELECT 
--     d.id AS deliverable_id,
--     d.name AS deliverable_name,
--     d.deliverable_type,
--     d.estimated_effort_hours,
--     d.requires_approval,
--     -- Service counts
--     COUNT(DISTINCT sd.service_id) AS service_count,
--     COUNT(DISTINCT CASE WHEN sd.is_optional = 0 THEN sd.service_id END) AS required_by_count,
--     COUNT(DISTINCT CASE WHEN sd.is_optional = 1 THEN sd.service_id END) AS optional_for_count,
--     -- Category distribution
--     COUNT(DISTINCT c.id) AS category_count,
--     GROUP_CONCAT(DISTINCT c.name ORDER BY c.name SEPARATOR ', ') AS categories
-- FROM `{!!prefix!!}srvc_deliverables` d
-- LEFT JOIN `{!!prefix!!}srvc_service_deliverables` sd ON d.id = sd.deliverable_id AND sd.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON sd.service_id = s.id AND s.deleted_at IS NULL AND s.is_active = 1
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- WHERE d.deleted_at IS NULL
-- GROUP BY d.id, d.name, d.deliverable_type, d.estimated_effort_hours, d.requires_approval;

-- -- ============================================================================
-- -- CATEGORY & TYPE ANALYSIS VIEWS
-- -- ============================================================================

-- -- Category Statistics
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_category_stats` AS
-- SELECT 
--     c.id AS category_id,
--     c.name AS category_name,
--     c.slug AS category_slug,
--     c.icon,
--     c.parent_id,
--     pc.name AS parent_category_name,
--     c.sort_order,
--     -- Service counts
--     COUNT(DISTINCT s.id) AS total_services,
--     SUM(CASE WHEN s.is_active = 1 THEN 1 ELSE 0 END) AS active_services,
--     SUM(CASE WHEN s.is_featured = 1 THEN 1 ELSE 0 END) AS featured_services,
--     -- Pricing statistics
--     AVG(sp.amount) AS avg_service_price,
--     MIN(sp.amount) AS min_service_price,
--     MAX(sp.amount) AS max_service_price,
--     -- Effort statistics
--     SUM(s.estimated_hours) AS total_estimated_hours,
--     AVG(s.estimated_hours) AS avg_estimated_hours,
--     -- Complexity distribution
--     SUM(CASE WHEN cl.level_order = 1 THEN 1 ELSE 0 END) AS basic_services,
--     SUM(CASE WHEN cl.level_order = 2 THEN 1 ELSE 0 END) AS intermediate_services,
--     SUM(CASE WHEN cl.level_order = 3 THEN 1 ELSE 0 END) AS advanced_services,
--     SUM(CASE WHEN cl.level_order >= 4 THEN 1 ELSE 0 END) AS expert_services
-- FROM `{!!prefix!!}srvc_categories` c
-- LEFT JOIN `{!!prefix!!}srvc_categories` pc ON c.parent_id = pc.id
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON c.id = s.category_id AND s.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE c.deleted_at IS NULL
--   AND c.is_active = 1
-- GROUP BY c.id, c.name, c.slug, c.icon, c.parent_id, pc.name, c.sort_order;

-- -- Service Type Statistics
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_type_stats` AS
-- SELECT 
--     st.id AS service_type_id,
--     st.name AS service_type_name,
--     st.code AS service_type_code,
--     st.billing_type,
--     st.delivery_method,
--     st.description,
--     -- Service counts
--     COUNT(DISTINCT s.id) AS total_services,
--     SUM(CASE WHEN s.is_active = 1 THEN 1 ELSE 0 END) AS active_services,
--     SUM(CASE WHEN s.is_featured = 1 THEN 1 ELSE 0 END) AS featured_services,
--     -- Pricing statistics
--     AVG(sp.amount) AS avg_service_price,
--     MIN(sp.amount) AS min_service_price,
--     MAX(sp.amount) AS max_service_price,
--     SUM(sp.amount) AS total_price,
--     -- Effort statistics
--     SUM(s.estimated_hours) AS total_estimated_hours,
--     AVG(s.estimated_hours) AS avg_estimated_hours,
--     -- Category distribution
--     COUNT(DISTINCT s.category_id) AS category_count,
--     -- Complexity distribution
--     AVG(cl.level_order) AS avg_complexity_level
-- FROM `{!!prefix!!}srvc_service_types` st
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON st.id = s.service_type_id AND s.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE st.deleted_at IS NULL
--   AND st.is_active = 1
-- GROUP BY st.id, st.name, st.code, st.billing_type, st.delivery_method, st.description;

-- -- Complexity Level Statistics
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_complexity_stats` AS
-- SELECT 
--     cl.id AS complexity_id,
--     cl.name AS complexity_name,
--     cl.level_order,
--     cl.price_multiplier,
--     cl.icon,
--     cl.color,
--     cl.description,
--     -- Service counts
--     COUNT(DISTINCT s.id) AS total_services,
--     SUM(CASE WHEN s.is_active = 1 THEN 1 ELSE 0 END) AS active_services,
--     SUM(CASE WHEN s.is_featured = 1 THEN 1 ELSE 0 END) AS featured_services,
--     -- Pricing statistics
--     AVG(sp.amount) AS avg_base_price,
--     AVG(sp.amount * cl.price_multiplier) AS avg_adjusted_price,
--     MIN(sp.amount) AS min_base_price,
--     MAX(sp.amount) AS max_base_price,
--     -- Effort statistics
--     SUM(s.estimated_hours) AS total_estimated_hours,
--     AVG(s.estimated_hours) AS avg_estimated_hours,
--     MIN(s.estimated_hours) AS min_estimated_hours,
--     MAX(s.estimated_hours) AS max_estimated_hours,
--     -- Category distribution
--     COUNT(DISTINCT s.category_id) AS category_count,
--     -- Service type distribution
--     COUNT(DISTINCT s.service_type_id) AS service_type_count
-- FROM `{!!prefix!!}srvc_complexity_levels` cl
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON cl.id = s.complexity_id AND s.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE cl.deleted_at IS NULL
--   AND cl.is_active = 1
-- GROUP BY cl.id, cl.name, cl.level_order, cl.price_multiplier, 
--          cl.icon, cl.color, cl.description;

-- -- ============================================================================
-- -- COMPREHENSIVE EXECUTIVE VIEWS
-- -- ============================================================================

-- -- Service Catalog Executive Summary
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_executive_summary` AS
-- SELECT 
--     s.id AS service_id,
--     s.sku,
--     s.name AS service_name,
--     s.slug,
--     s.short_desc,
--     s.is_active,
--     s.is_featured,
--     -- Classification
--     c.name AS category_name,
--     c.icon AS category_icon,
--     pc.name AS parent_category_name,
--     st.name AS service_type_name,
--     st.billing_type,
--     st.delivery_method,
--     cl.name AS complexity_name,
--     cl.level_order AS complexity_level,
--     cl.price_multiplier,
--     s.skill_level,
--     s.estimated_hours,
--     -- Current Pricing (using most common tier - Small Business)
--     sp.amount AS base_price,
--     sp.setup_fee,
--     sp.unit AS pricing_unit,
--     sp.currency,
--     (sp.amount * cl.price_multiplier) AS adjusted_price,
--     pt.name AS tier_name,
--     pm.name AS pricing_model_name,
--     -- Relationships
--     (SELECT COUNT(*) FROM `{!!prefix!!}srvc_service_relationships` sr 
--      WHERE sr.service_id = s.id AND sr.deleted_at IS NULL) AS total_relationships,
--     (SELECT COUNT(*) FROM `{!!prefix!!}srvc_service_relationships` sr 
--      WHERE sr.service_id = s.id AND sr.relation_type = 'prerequisite' 
--      AND sr.deleted_at IS NULL) AS prerequisites,
--     (SELECT COUNT(*) FROM `{!!prefix!!}srvc_service_relationships` sr 
--      WHERE sr.service_id = s.id AND sr.relation_type = 'incompatible_with' 
--      AND sr.deleted_at IS NULL) AS incompatibilities,
--     -- Equipment
--     (SELECT COUNT(DISTINCT se.equipment_id) FROM `{!!prefix!!}srvc_service_equipment` se 
--      WHERE se.service_id = s.id AND se.deleted_at IS NULL) AS equipment_count,
--     (SELECT SUM(se.quantity * e.unit_cost) 
--      FROM `{!!prefix!!}srvc_service_equipment` se
--      JOIN `{!!prefix!!}srvc_equipment` e ON se.equipment_id = e.id
--      WHERE se.service_id = s.id AND se.deleted_at IS NULL 
--      AND e.deleted_at IS NULL) AS total_equipment_cost,
--     -- Deliverables
--     (SELECT COUNT(*) FROM `{!!prefix!!}srvc_service_deliverables` sd 
--      WHERE sd.service_id = s.id AND sd.is_optional = 0 
--      AND sd.deleted_at IS NULL) AS required_deliverables,
--     (SELECT SUM(d.estimated_effort_hours) 
--      FROM `{!!prefix!!}srvc_service_deliverables` sd
--      JOIN `{!!prefix!!}srvc_deliverables` d ON sd.deliverable_id = d.id
--      WHERE sd.service_id = s.id AND sd.deleted_at IS NULL 
--      AND d.deleted_at IS NULL) AS deliverable_effort_hours,
--     -- Bundle participation
--     (SELECT COUNT(DISTINCT bi.bundle_id) FROM `{!!prefix!!}srvc_bundle_items` bi
--      JOIN `{!!prefix!!}srvc_service_bundles` sb ON bi.bundle_id = sb.id
--      WHERE bi.service_id = s.id AND bi.deleted_at IS NULL 
--      AND sb.deleted_at IS NULL AND sb.is_active = 1) AS bundle_count,
--     -- Metadata
--     s.minimum_quantity,
--     s.maximum_quantity,
--     s.metadata,
--     s.version,
--     -- Timestamps
--     s.created_at,
--     s.updated_at,
--     creator.display_name AS created_by_name,
--     updater.display_name AS updated_by_name
-- FROM `{!!prefix!!}srvc_services` s
-- INNER JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_categories` pc ON c.parent_id = pc.id
-- INNER JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- INNER JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
--     AND sp.pricing_tier_id = (SELECT id FROM `{!!prefix!!}srvc_pricing_tiers` 
--                                WHERE code = 'small_business' AND deleted_at IS NULL LIMIT 1)
-- LEFT JOIN `{!!prefix!!}srvc_pricing_tiers` pt ON sp.pricing_tier_id = pt.id
-- LEFT JOIN `{!!prefix!!}srvc_pricing_models` pm ON sp.pricing_model_id = pm.id
-- INNER JOIN `{!!prefix!!}users` creator ON s.created_by = creator.ID
-- INNER JOIN `{!!prefix!!}users` updater ON s.updated_by = updater.ID
-- WHERE s.deleted_at IS NULL
--   AND s.is_active = 1
--   AND c.deleted_at IS NULL
--   AND st.deleted_at IS NULL
--   AND cl.deleted_at IS NULL;

-- -- Service Portfolio Analysis
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_portfolio_analysis` AS
-- SELECT 
--     'Total Services' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_services` 
-- WHERE deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Active Services' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_services` 
-- WHERE deleted_at IS NULL AND is_active = 1

-- UNION ALL

-- SELECT 
--     'Featured Services' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_services` 
-- WHERE deleted_at IS NULL AND is_featured = 1

-- UNION ALL

-- SELECT 
--     'Average Service Price' AS metric_name,
--     ROUND(AVG(sp.amount), 2) AS metric_value,
--     'currency' AS metric_type
-- FROM `{!!prefix!!}srvc_service_prices` sp
-- WHERE sp.is_current = 1 AND sp.deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Total Equipment Items' AS metric_name,
--     COUNT(DISTINCT id) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_equipment`
-- WHERE deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Active Bundles' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_service_bundles`
-- WHERE deleted_at IS NULL AND is_active = 1

-- UNION ALL

-- SELECT 
--     'Total Service Relationships' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_service_relationships`
-- WHERE deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Total Deliverables' AS metric_name,
--     COUNT(DISTINCT id) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_deliverables`
-- WHERE deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Average Estimated Hours' AS metric_name,
--     ROUND(AVG(estimated_hours), 2) AS metric_value,
--     'hours' AS metric_type
-- FROM `{!!prefix!!}srvc_services`
-- WHERE deleted_at IS NULL AND estimated_hours IS NOT NULL

-- UNION ALL

-- SELECT 
--     'Services Requiring Equipment' AS metric_name,
--     COUNT(DISTINCT service_id) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_service_equipment`
-- WHERE deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Average Equipment Cost per Service' AS metric_name,
--     ROUND(AVG(total_cost), 2) AS metric_value,
--     'currency' AS metric_type
-- FROM (
--     SELECT se.service_id, SUM(se.quantity * e.unit_cost) AS total_cost
--     FROM `{!!prefix!!}srvc_service_equipment` se
--     JOIN `{!!prefix!!}srvc_equipment` e ON se.equipment_id = e.id
--     WHERE se.deleted_at IS NULL AND e.deleted_at IS NULL
--     GROUP BY se.service_id
-- ) AS equipment_costs

-- UNION ALL

-- SELECT 
--     'Total Categories' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_categories`
-- WHERE deleted_at IS NULL AND is_active = 1

-- UNION ALL

-- SELECT 
--     'Total Service Types' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_service_types`
-- WHERE deleted_at IS NULL AND is_active = 1

-- UNION ALL

-- SELECT 
--     'Pricing Records' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_service_prices`
-- WHERE deleted_at IS NULL

-- UNION ALL

-- SELECT 
--     'Current Active Prices' AS metric_name,
--     COUNT(*) AS metric_value,
--     'count' AS metric_type
-- FROM `{!!prefix!!}srvc_service_prices`
-- WHERE deleted_at IS NULL AND is_current = 1 AND approval_status = 'approved';

-- -- Service Complexity Distribution
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_complexity_distribution` AS
-- SELECT 
--     cl.name AS complexity_level,
--     cl.level_order,
--     cl.price_multiplier,
--     COUNT(s.id) AS service_count,
--     ROUND(COUNT(s.id) * 100.0 / (SELECT COUNT(*) FROM `{!!prefix!!}srvc_services` WHERE deleted_at IS NULL AND is_active = 1), 2) AS percentage,
--     AVG(s.estimated_hours) AS avg_estimated_hours,
--     SUM(s.estimated_hours) AS total_estimated_hours,
--     AVG(sp.amount) AS avg_base_price,
--     AVG(sp.amount * cl.price_multiplier) AS avg_adjusted_price
-- FROM `{!!prefix!!}srvc_complexity_levels` cl
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON cl.id = s.complexity_id 
--     AND s.deleted_at IS NULL AND s.is_active = 1
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE cl.deleted_at IS NULL AND cl.is_active = 1
-- GROUP BY cl.id, cl.name, cl.level_order, cl.price_multiplier
-- ORDER BY cl.level_order;

-- -- Service Category Distribution
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_category_distribution` AS
-- SELECT 
--     c.name AS category_name,
--     c.slug AS category_slug,
--     c.icon,
--     pc.name AS parent_category_name,
--     COUNT(s.id) AS service_count,
--     ROUND(COUNT(s.id) * 100.0 / (SELECT COUNT(*) FROM `{!!prefix!!}srvc_services` WHERE deleted_at IS NULL AND is_active = 1), 2) AS percentage,
--     SUM(CASE WHEN s.is_featured = 1 THEN 1 ELSE 0 END) AS featured_count,
--     AVG(sp.amount) AS avg_price,
--     MIN(sp.amount) AS min_price,
--     MAX(sp.amount) AS max_price,
--     AVG(s.estimated_hours) AS avg_estimated_hours
-- FROM `{!!prefix!!}srvc_categories` c
-- LEFT JOIN `{!!prefix!!}srvc_categories` pc ON c.parent_id = pc.id
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON c.id = s.category_id 
--     AND s.deleted_at IS NULL AND s.is_active = 1
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE c.deleted_at IS NULL AND c.is_active = 1
-- GROUP BY c.id, c.name, c.slug, c.icon, pc.name
-- ORDER BY service_count DESC;

-- -- Pricing Model Distribution
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_pricing_distribution` AS
-- SELECT 
--     pm.name AS pricing_model,
--     pm.code AS model_code,
--     pm.is_time_based,
--     COUNT(DISTINCT sp.service_id) AS service_count,
--     ROUND(COUNT(DISTINCT sp.service_id) * 100.0 / 
--         (SELECT COUNT(DISTINCT service_id) FROM `{!!prefix!!}srvc_service_prices` 
--          WHERE deleted_at IS NULL AND is_current = 1), 2) AS percentage,
--     AVG(sp.amount) AS avg_price,
--     MIN(sp.amount) AS min_price,
--     MAX(sp.amount) AS max_price,
--     SUM(sp.amount) AS total_price_value,
--     COUNT(DISTINCT sp.pricing_tier_id) AS tier_count
-- FROM `{!!prefix!!}srvc_pricing_models` pm
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON pm.id = sp.pricing_model_id
--     AND sp.deleted_at IS NULL AND sp.is_current = 1
-- WHERE pm.deleted_at IS NULL
-- GROUP BY pm.id, pm.name, pm.code, pm.is_time_based
-- ORDER BY service_count DESC;

-- -- Service Relationship Network Analysis
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_relationship_network` AS
-- SELECT 
--     relation_type,
--     COUNT(*) AS relationship_count,
--     AVG(strength) AS avg_strength,
--     COUNT(DISTINCT service_id) AS unique_services,
--     COUNT(DISTINCT related_service_id) AS unique_related_services,
--     SUM(CASE WHEN strength >= 8 THEN 1 ELSE 0 END) AS critical_relationships,
--     SUM(CASE WHEN strength BETWEEN 6 AND 7 THEN 1 ELSE 0 END) AS high_relationships,
--     SUM(CASE WHEN strength BETWEEN 4 AND 5 THEN 1 ELSE 0 END) AS medium_relationships,
--     SUM(CASE WHEN strength <= 3 THEN 1 ELSE 0 END) AS low_relationships
-- FROM `{!!prefix!!}srvc_service_relationships`
-- WHERE deleted_at IS NULL
-- GROUP BY relation_type
-- ORDER BY relationship_count DESC;

-- -- Equipment Category Analysis
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_equipment_category_analysis` AS
-- SELECT 
--     e.category AS equipment_category,
--     COUNT(DISTINCT e.id) AS equipment_count,
--     COUNT(DISTINCT se.service_id) AS service_count,
--     SUM(se.quantity) AS total_quantity_used,
--     AVG(e.unit_cost) AS avg_unit_cost,
--     SUM(se.quantity * e.unit_cost) AS total_cost_impact,
--     SUM(CASE WHEN e.is_consumable = 1 THEN 1 ELSE 0 END) AS consumable_count,
--     SUM(CASE WHEN se.required = 1 THEN 1 ELSE 0 END) AS required_assignments,
--     SUM(CASE WHEN se.cost_included = 1 THEN se.quantity * e.unit_cost ELSE 0 END) AS included_cost,
--     SUM(CASE WHEN se.cost_included = 0 THEN se.quantity * e.unit_cost ELSE 0 END) AS additional_cost
-- FROM `{!!prefix!!}srvc_equipment` e
-- LEFT JOIN `{!!prefix!!}srvc_service_equipment` se ON e.id = se.equipment_id 
--     AND se.deleted_at IS NULL
-- WHERE e.deleted_at IS NULL
-- GROUP BY e.category
-- ORDER BY total_cost_impact DESC;

-- -- Bundle Performance Analysis
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_bundle_performance` AS
-- SELECT 
--     sb.id AS bundle_id,
--     sb.name AS bundle_name,
--     sb.bundle_type,
--     sb.total_discount_pct,
--     COUNT(DISTINCT bi.service_id) AS service_count,
--     SUM(CASE WHEN bi.is_optional = 0 THEN 1 ELSE 0 END) AS required_services,
--     SUM(CASE WHEN bi.is_optional = 1 THEN 1 ELSE 0 END) AS optional_services,
--     -- Price calculations
--     SUM(bi.quantity * COALESCE(sp.amount, 0)) AS total_list_price,
--     SUM(bi.quantity * COALESCE(sp.amount, 0) * (1 - bi.discount_pct / 100)) AS after_item_discount,
--     SUM(bi.quantity * COALESCE(sp.amount, 0) * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) AS final_bundle_price,
--     -- Savings
--     SUM(bi.quantity * COALESCE(sp.amount, 0)) - 
--         SUM(bi.quantity * COALESCE(sp.amount, 0) * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) AS total_savings,
--     CASE 
--         WHEN SUM(bi.quantity * COALESCE(sp.amount, 0)) > 0 
--         THEN ROUND((1 - SUM(bi.quantity * COALESCE(sp.amount, 0) * (1 - bi.discount_pct / 100) * (1 - sb.total_discount_pct / 100)) 
--             / SUM(bi.quantity * COALESCE(sp.amount, 0))) * 100, 2)
--         ELSE 0
--     END AS effective_discount_pct,
--     -- Effort
--     SUM(s.estimated_hours * bi.quantity) AS total_estimated_hours,
--     -- Categories involved
--     COUNT(DISTINCT c.id) AS category_count,
--     GROUP_CONCAT(DISTINCT c.name ORDER BY c.name SEPARATOR ', ') AS categories,
--     -- Status
--     CASE 
--         WHEN sb.valid_to IS NOT NULL AND sb.valid_to < NOW() THEN 'Expired'
--         WHEN sb.valid_from > NOW() THEN 'Upcoming'
--         ELSE 'Active'
--     END AS status,
--     sb.valid_from,
--     sb.valid_to,
--     sb.created_at,
--     sb.updated_at
-- FROM `{!!prefix!!}srvc_service_bundles` sb
-- LEFT JOIN `{!!prefix!!}srvc_bundle_items` bi ON sb.id = bi.bundle_id AND bi.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_services` s ON bi.service_id = s.id AND s.deleted_at IS NULL
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE sb.deleted_at IS NULL AND sb.is_active = 1
-- GROUP BY sb.id, sb.name, sb.bundle_type, sb.total_discount_pct, 
--          sb.valid_from, sb.valid_to, sb.created_at, sb.updated_at;

-- -- Deliverable Type Distribution
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_deliverable_distribution` AS
-- SELECT 
--     d.deliverable_type,
--     COUNT(DISTINCT d.id) AS deliverable_count,
--     COUNT(DISTINCT sd.service_id) AS service_count,
--     AVG(d.estimated_effort_hours) AS avg_effort_hours,
--     SUM(d.estimated_effort_hours) AS total_effort_hours,
--     SUM(CASE WHEN d.requires_approval = 1 THEN 1 ELSE 0 END) AS requires_approval_count,
--     SUM(CASE WHEN sd.is_optional = 0 THEN 1 ELSE 0 END) AS required_assignments,
--     SUM(CASE WHEN sd.is_optional = 1 THEN 1 ELSE 0 END) AS optional_assignments
-- FROM `{!!prefix!!}srvc_deliverables` d
-- LEFT JOIN `{!!prefix!!}srvc_service_deliverables` sd ON d.id = sd.deliverable_id 
--     AND sd.deleted_at IS NULL
-- WHERE d.deleted_at IS NULL
-- GROUP BY d.deliverable_type
-- ORDER BY deliverable_count DESC;

-- -- ============================================================================
-- -- SEARCH & LOOKUP HELPER VIEWS
-- -- ============================================================================

-- -- Service Quick Lookup
-- CREATE OR REPLACE VIEW `{!!prefix!!}vw_srvc_quick_lookup` AS
-- SELECT 
--     s.id,
--     s.sku,
--     s.slug,
--     s.name,
--     s.short_desc,
--     c.name AS category,
--     st.name AS service_type,
--     cl.name AS complexity,
--     s.is_active,
--     s.is_featured,
--     COALESCE(sp.amount, 0) AS price,
--     sp.currency,
--     sp.unit,
--     s.estimated_hours
-- FROM `{!!prefix!!}srvc_services` s
-- LEFT JOIN `{!!prefix!!}srvc_categories` c ON s.category_id = c.id
-- LEFT JOIN `{!!prefix!!}srvc_service_types` st ON s.service_type_id = st.id
-- LEFT JOIN `{!!prefix!!}srvc_complexity_levels` cl ON s.complexity_id = cl.id
-- LEFT JOIN `{!!prefix!!}srvc_service_prices` sp ON s.id = sp.service_id 
--     AND sp.is_current = 1 AND sp.deleted_at IS NULL
-- WHERE s.deleted_at IS NULL;

-- >>> Down >>>

-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_quick_lookup`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_deliverable_distribution`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_bundle_performance`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_equipment_category_analysis`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_relationship_network`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_pricing_distribution`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_category_distribution`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_complexity_distribution`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_portfolio_analysis`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_executive_summary`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_complexity_stats`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_type_stats`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_category_stats`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_deliverable_utilization`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_deliverables_summary`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_deliverables_all`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_deliverables_active`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_bundle_pricing`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_bundle_items_all`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_bundle_items_active`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_bundles_all`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_bundles_active`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_equipment_utilization`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_equipment_costs`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_equipment_all`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_equipment_active`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_relationships_summary`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_relationships_all`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_relationships_active`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_pricing_history`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_pricing_by_model`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_pricing_by_tier`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_pricing_all`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_pricing_current`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_catalog_metrics`;
-- DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_catalog_all`;
DROP VIEW IF EXISTS `{!!prefix!!}vw_srvc_catalog_active`;